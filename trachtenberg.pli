# when storing multiplicand in array, we always have pad one zero on the right, and several zeros on the left.

function split_number n options -> a
  arg Str n ; arg Str options ; arg Array:Int a
  var Int left_pad := options option "left_pad" Int 0
  var Int right_pad := options option "right_pad" Int 0
  a size := left_pad + n:len + right_pad
  var Int i := a:size-1
  while i > a:size-1-right_pad
    a i := 0
    i -= 1
  var Int i := a:size-2
  var Int j := n:len-1
  var Str cur := n
  while j >= 0
    if not (cur:j eparse (var Int digit))
      digit := 0
    a i := digit
    i -= 1
    j -= 1
  while i >= 0 # leading zeros
    a i := 0
    i -= 1

function join_number a options -> n
  arg Str n ; arg Array:Int a ; arg Str options
  var Int i := 0
  if (options option "trim_left")
    while a:i = 0 and i < a:size
      i += 1
  n := ""
  var Int stop := a:size - (options option "trim_right" Int 0)
  while i < stop
    n += string a:i
    i += 1

function join_number a -> n
  arg Str n ; arg Array:Int a
  n := join_number a "trim_left"

function set_carry carry r
  arg_rw Int r ; arg_rw Int carry
  if r > 9
    carry := r \ 10
    r := r % 10
  else
    carry := 0

function times_11_rule number neighbour carry r
  arg Int number neighbour ; arg_rw Int carry ; arg_rw Int r
  r := number + neighbour + carry

function times_12_rule number neighbour carry r
  arg Int number neighbour ; arg_rw Int carry ; arg_rw Int r
  r := 2*number + neighbour + carry

function times_6_rule number neighbour carry r
  arg Int number neighbour ; arg_rw Int carry ; arg_rw Int r
  r := number + neighbour\2 + carry
  if (number % 2) = 1
    r += 5

function times_7_rule number neighbour carry r
  arg Int number neighbour ; arg_rw Int carry ; arg_rw Int r
  r := 2*number + neighbour\2 + carry
  if (number % 2) = 1
    r += 5

function times_5_rule number neighbour carry r
  arg Int number neighbour ; arg_rw Int carry ; arg_rw Int r
  r := neighbour\2 + carry
  if (number % 2) = 1
    r += 5

function times_9_rule number neighbour carry r position multiplicand_len
  arg Int number neighbour ; arg_rw Int carry ; arg_rw Int r  ; arg Int position multiplicand_len
  if position = 0
    r := (10 - number) + neighbour + carry
  eif position < multiplicand_len
    r := (9 - number) + neighbour + carry
  eif position = multiplicand_len
    r := neighbour-1 + carry
  else
    r := 0

function times_8_rule number neighbour carry r position multiplicand_len
  arg Int number neighbour ; arg_rw Int carry ; arg_rw Int r  ; arg Int position multiplicand_len
  if position = 0
    r := 2*(10 - number) + neighbour + carry
  eif position < multiplicand_len
    r := 2*(9 - number) + neighbour + carry
  eif position = multiplicand_len
    r := neighbour-2 + carry
  else
    r := 0


function trachtenberg_multiply multiplicand multiplier -> result
  arg Str multiplicand multiplier result
  var Array:Int m := split_number multiplicand "left_pad "+string:(multiplier:len+1)+" right_pad 1"
  var Array:Int r
  if multiplier:len < 3 and (multiplier eparse (var Int f)) and f > 2 and f <= 12
    r size := m:size-1
    var Int carry := 0
    for (var Int i) r:size-1 0 step -1
      if f = 11
        times_11_rule m:i m:(i+1) carry r:i
      eif f = 12
        times_12_rule m:i m:(i+1) carry r:i
      eif f = 6
        times_6_rule m:i m:(i+1) carry r:i
      eif f = 7
        times_7_rule m:i m:(i+1) carry r:i
      eif f = 5
        times_5_rule m:i m:(i+1) carry r:i
      eif f = 9
        times_9_rule m:i m:(i+1) carry r:i r:size-i-1 multiplicand:len
      eif f = 8
        times_8_rule m:i m:(i+1) carry r:i r:size-i-1 multiplicand:len
      set_carry carry r:i
  else 
    r size := 1 ; r 0 := 0
  result := join_number r
  
export trachtenberg_multiply

